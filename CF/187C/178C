//in the name of Allah

#include <bits/stdc++.h>

#pragma GCC target ("sse4")
#pragma GCC target("avx2")
#pragma GCC optimize("O3,O2,-O2,Ofast,no-stack-protector,unroll-loops,fast-math")
#pragma GCC optimize ("O2,unroll-loops")

using namespace std;

#define FastIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0); cout << '\n';

#define ll long long
//#define int ll
#define pii pair<int, int>
#define pll pair<ll, ll>
#define max_self(a, b) a = max(a, b)
#define min_self(a, b) a = min(a, b)

#define all(x) x.begin(), x.end()
#define pb push_back
#define F first
#define S second
#define SZ(x) ((int) x.size())
#define mp make_pair

const int maxn = 1e5 + 5;
vector<int> adj[maxn], vec;
int par[maxn], dis[maxn];
bool mark[maxn];
int q[maxn], pos[maxn], sz;
int n, m, k;

int root(int u){ return par[u] < 0 ? u : par[u] = root(par[u]);}

void merge(int u, int v){
	if((u = root(u)) == (v = root(v))) return;
	if(par[u] > par[v]) swap(u, v);
	par[u] += par[v];
	par[v] = u;
	return;
}

void add_edg(int u, int v){
	adj[u].pb(v);
	adj[v].pb(u);
}

int main(){
	FastIO
    fill(par + 0, par + maxn, -1);
    fill(dis + 0, dis + maxn, INT_MAX);
	cin >> n >> m >> k;
	for(int i = 0; i < k; i++){
		int x;
		cin >> x, x--;
		vec.pb(x);
	}
	for(int i = 0; i < m; i++){
		int u, v;
		cin >> u >> v;
		add_edg(u - 1, v - 1);
	}
	int st, en;
	cin >> st >> en, st--, en--;
	vec.pb(en);
	sort(all(vec));
	vec.resize(unique(all(vec)) - vec.begin());
    fill(pos + 0, pos + maxn, -1);
	pos[0] = 0;
	for(auto u : vec)
		q[sz++] = u, mark[u] = true, dis[u] = 0;
	for(int i = 0; i == 0 or pos[i] > pos[i - 1]; i++){
		pos[i + 1] = sz;
		for(int j = pos[i]; j < pos[i + 1]; j++){
			int u = q[j];
			for(auto v : adj[u]){
				if(!mark[v]){
					mark[v] = true;
					q[sz++] = v;
					dis[v] = dis[u] + 1;
					par[v] = u;
				}
				else if(dis[v] == dis[u])
					merge(u, v);
			}
		}
		if(root(st) == root(en)){
			cout << (i << 1 | 1) << endl;
			return 0;
		}
		for(int j = pos[i]; j < pos[i + 1]; j++){
			int u = q[j];
			for(auto v : adj[u])
				if(dis[v] == dis[u] + 1)
					merge(u, v);
		}
		if(root(st) == root(en)){
			cout << ((i + 1) << 1) << endl;
			return 0;
		}
	}
	cout << -1 << endl;
	return 0;
}
